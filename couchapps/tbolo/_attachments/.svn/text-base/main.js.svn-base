var db = $.couch.db(window.location.pathname.split("/")[1]);

var run15date = 1306185082*1000.0; //run15 start date in milliseconds since Jan 1 1970
var timenow = (new Date()).getTime(); //in milliseconds
var twoWeeksAgo = timenow - 3600.0*24.0*14.0*1000.0;
var fourWeeksAgo = timenow - 3600.0*24.0*28.0*1000.0;


$(document).ready(function() {
	setLastRunOptions(null);
    setFirstRunOptions(null);
    
    getTemperatureFromDbToPlot()
                    
    $('#getTempsId').click(function(e) {

    	setTableTopRow();
          
        getTemperatureFromDb();                                  
                
        getTemperatureFromDbToPlot();
                                        
     });

     $('#clearId').click(function(e) {
     	setLastRunOptions(null);
        setFirstRunOptions(null);
     });
});

function getTemperatureFromDbToPlot(){

   var chart;
   var options = { 
      chart: {
         renderTo: 'temperature-chart',
         zoomType: 'xy'
         //spacingRight: 20
      },
       title: {
         text: 'Cryostat Temperature [mK] vs GMT'
      },
       subtitle: {
          text: 'as reported by Samba Data Headers'
      },
      xAxis: {
         type: 'datetime',
         maxZoom: 1 * 24 * 3600000, // one day
         title: {
            text: null
         },
         dateTimeLabelFormats: {
            day: '%e %b',
            hour: '%e %b %H:%M'   
         },
         showFirstLabel : false
      },
      yAxis: {
         title: {
            text: null
         },
         //min: 0.6,
         //startOnTick: false,
         showFirstLabel: false,
         labels: {
                    align: 'left',
                    x: 3,
                    y: -2,
                    formatter: function() {
                        return Highcharts.numberFormat(this.value, 2);
                    }
                }
      },
      legend: {
		  align: 'left',
		  verticalAlign: 'top',
		  y: 20,
		  x: 80,
		  floating: true,
		  borderWidth: 0
      },
      tooltip: {
         shared: false,
         formatter: function() {
            return Highcharts.dateFormat('%Y-%b-%d  %H:%M', this.x) +'<br/> '+ this.y +' mK';
        }
      },
      plotOptions: {
         series: {
            /*fillColor: {
               linearGradient: [0, 0, 0, 300],
               stops: [
                  [0, Highcharts.theme.colors[0]],
                  [1, 'rgba(2,0,0,0)']
               ]
            },*/
            cursor: 'pointer',
			     	point: {
			 	   	   events: {
					       	click: function() {
							 hs.htmlExpand(null, {
							 	pageOrigin: {
									x: this.pageX, 
									y: this.pageY
								},
								headingText: this.series.name,
								maincontentText: Highcharts.dateFormat('%Y-%b-%d  %H:%M', this.x) +'<br/> '+ this.y +' mK',	width: 200
							});
						}
					}
            },
            lineWidth: 1,
            marker: {
               enabled: false,
               states: {
                  hover: {
                     enabled: true,
                     radius: 5
                  }
               }
            },
            shadow: false,
            states: {
               hover: {
                  lineWidth: 1                  
               }
            }
         }
      },
			
      series: [{
        //type: 'series',
		name: 'Temperature [mK]',
		lineWidth: 2,
		marker: {
	    	radius: 2
		}
      }]
    };
        
   	
    var db = $.couch.db(window.location.pathname.split("/")[1]);

    db.view("temperature/gettemps",  {
          
    	endkey:[$('#lastrunId').val()+"\ufff0","{}"],
        startkey:[$('#firstrunId').val(),"{}"],
        success:function(data){ 
            var temps = [];
            var runheadertemp;
            
            jQuery.each(data.rows, function(i, row){
                var number = row.value[0]*1000.0;
                var tnum = new Number(number+'').toFixed(parseInt(5));
                var t = parseFloat(tnum);
                
                if ( $('#lastrunId').val() == "" && $('#firstrunId').val() == ""){
				        
				    var currentdate =  row.value[1]*1000.0 + 3600.0*1000.0*row.key[2];
			 	    if(t < 500.0 && currentdate > fourWeeksAgo){
				        temps.push([currentdate, t]);
                    }   
				    
                }
                else {
                    
                    var currentdate =  row.value[1]*1000.0 + 3600.0*1000.0*row.key[2];
			 	      if(t < 500.0 && currentdate){
				        temps.push([currentdate, t]);
                    }
                        
                }
				
            });
            
            options.series[0].data = temps;
			chart = new Highcharts.Chart(options);
         },
         error: function(req, textStatus, errorThrown){alert('Error '+ textStatus);}
    });
}


function getTemperatureFromDb(){
	db.view("temperature/gettemps",  {
          
    	endkey:[$('#lastrunId').val()+"\ufff0","{}"],
        startkey:[$('#firstrunId').val(),"{}"],
        success:function(data){ 
        	data.rows.map(function(row) {
        	   if(row.key[2] == 0){
        	        var num = row.value[0]*1000.0;
        	        
                    addToTable(row.key[0], row.key[2], num.toFixed(5));
               }
               else if (row.key[2] > 0){
                    var num = row.value[0]*1000.0;
                    
                    addToTable("",  row.key[2], num.toFixed(5));
               }
         	});
         },
         error: function(req, textStatus, errorThrown){alert('Error '+ textStatus);}
    });
}

function setTableTopRow(){
	var tbl = document.getElementById('temperatureData');
	var tblbody = tbl.getElementsByTagName("tbody");
	
	for(var i = 0; i < tblbody.length; i++){tbl.removeChild(tblbody[i]);}
	
	var tblbody = document.createElement("tbody");
	tblbody.setAttribute("id","tempTableBody");
	var row = document.createElement("tr");
	
	var cell = document.createElement("td");
	cell.setAttribute("width","80");
	var celltext  = document.createTextNode(" Run ");
	cell.appendChild(celltext);
	row.appendChild(cell);
	
	var cell = document.createElement("td");
	cell.setAttribute("width","80");
	var celltext  = document.createTextNode(" File(Partition) ");
	cell.appendChild(celltext);
	row.appendChild(cell);
	
	var cell = document.createElement("td");
	cell.setAttribute("width","80");
	var celltext  = document.createTextNode(" Temp (mK) ");
	cell.appendChild(celltext);
	row.appendChild(cell);
	
	tblbody.appendChild(row);
	tbl.appendChild(tblbody);
	tbl.setAttribute("border", "0");
}

function addToTable(run, file, temperature){
	var tblbody = document.getElementById('tempTableBody');
	var row = document.createElement("tr");
	
	var cell = document.createElement("td");
	cell.setAttribute("width","80");
	var celltext  = document.createTextNode(run);
	cell.appendChild(celltext);
	row.appendChild(cell);
	
	var cell = document.createElement("td");
	cell.setAttribute("width","80");
	var celltext  = document.createTextNode(file);
	cell.appendChild(celltext);
	row.appendChild(cell);
	
	var cell = document.createElement("td");
	cell.setAttribute("width","80");
	cell.setAttribute("align","right");
	var celltext  = document.createTextNode(temperature);
	cell.appendChild(celltext);
	row.appendChild(cell);
	
	tblbody.appendChild(row);
}

function setFirstRunOptions(chosen) {
  var selbox = document.temperatureform.firstrun;
  
  
  if (!chosen || chosen == "") {
    var currentval = selbox.options[selbox.selectedIndex].value;
    selbox.options.length = 0;
    selbox.options[selbox.options.length] = new Option("all","");
    db.view("bolorunconfig/runname",  {
            
   		group:true,
   		descending:true,
        success:function(data){ 
        	data.rows.map(function(row) {
              if(row.key == currentval){
              	  selbox.options[selbox.options.length] = new Option(row.key,row.key, true, true);                          
              }
              else {
              	  selbox.options[selbox.options.length] = new Option(row.key,row.key); 
              }                      
        	});
        },
        error: function(req, textStatus, errorThrown){alert('Error '+ textStatus);}
    });
    
  }
  
  else if (chosen != "") {
    var currentval = selbox.options[selbox.selectedIndex].value;
    selbox.options.length = 0;
    selbox.options[selbox.options.length] = new Option("all","");
    db.view("bolorunconfig/runname",  {
            
  	  group:true,
      startkey:chosen,
      descending:true,
      success:function(data){ 
    	  data.rows.map(function(row) {
        	  if(row.key == currentval){
              	  selbox.options[selbox.options.length] = new Option(row.key,row.key, true, true);                          
              }
              else {
              	  selbox.options[selbox.options.length] = new Option(row.key,row.key); 
              }
          });
            
       },
       error: function(req, textStatus, errorThrown){alert('Error '+ textStatus);}
    });
    
    
  } 
  
}

function setLastRunOptions(chosen) {
  var selbox = document.temperatureform.lastrun;
  
  
  if (!chosen || chosen == "") {
    var currentval = selbox.options[selbox.selectedIndex].value;
    
    selbox.options.length = 0;
    selbox.options[selbox.options.length] = new Option("all","");
    db.view("bolorunconfig/runname",  {
            
		group:true,
		descending:true,
        success:function(data){ 
        	data.rows.map(function(row) {
                if(row.key == currentval){
              	  selbox.options[selbox.options.length] = new Option(row.key,row.key, true, true);                          
                }
                else {
              	  selbox.options[selbox.options.length] = new Option(row.key,row.key); 
                }      
            });
        },
        error: function(req, textStatus, errorThrown){alert('Error '+ textStatus);}
     });
  }
  
  else  if (chosen != ""){
    var currentval = selbox.options[selbox.selectedIndex].value;
    
    selbox.options.length = 0;
    selbox.options[selbox.options.length] = new Option("all","");
    db.view("bolorunconfig/runname",  {
            
    	group:true,
        endkey:chosen,  //since i reverse the order with descending == true, i change the start/end key appropriately
        descending:true,
        success:function(data){ 
        	data.rows.map(function(row) {
            	if(row.key == currentval){
              	  selbox.options[selbox.options.length] = new Option(row.key,row.key, true, true);                          
                }
                else {
              	  selbox.options[selbox.options.length] = new Option(row.key,row.key); 
                }
            });
        },
        error: function(req, textStatus, errorThrown){alert('Error '+ textStatus);}
    });
    
  }
  
}

